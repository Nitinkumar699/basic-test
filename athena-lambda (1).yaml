AWSTemplateFormatVersion: "2010-09-09"
Description: Lambda for Athena Snowflake connector
Parameters:
  LambdaFunctionName:
    Description: This is the name of the lambda function that will be created. This
      name must satisfy the pattern ^[a-z0-9-_]{1,64}$
    Type: String
    AllowedPattern: ^[a-z0-9-_]{1,64}$
  DefaultConnectionString:
    Description: 'The default connection string is used when catalog is "lambda:${LambdaFunctionName}".
      Catalog specific Connection Strings can be added later. Format: ${DatabaseType}://${NativeJdbcConnectionString}.'
    Type: String
  SecretNamePrefix:
    Description: Used to create resource-based authorization policy for "secretsmanager:GetSecretValue"
      action. E.g. All Athena JDBC Federation secret names can be prefixed with "AthenaJdbcFederation"
      and authorization policy will allow "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:AthenaJdbcFederation*".
      Parameter value in this case should be "AthenaJdbcFederation". If you do not
      have a prefix, you can manually update the IAM policy to add allow any secret
      names.
    Type: String
  SpillBucket:
    Description: The name of the bucket where this function can spill data.
    Type: String
  SpillPrefix:
    Description: The prefix within SpillBucket where this function can spill data.
    Type: String
    Default: athena-spill
  LambdaTimeout:
    Description: Maximum Lambda invocation runtime in seconds. (min 1 - 900 max)
    Default: 900
    Type: Number
  LambdaMemory:
    Description: Lambda memory in MB (min 128 - 3008 max).
    Default: 3008
    Type: Number
  DisableSpillEncryption:
    Description: If set to 'false' data spilled to S3 is encrypted with AES GCM
    Default: 'false'
    Type: String
  SecurityGroupIds:
    Description: (Optional) One or more SecurityGroup IDs corresponding to the SecurityGroup
      that should be applied to the Lambda function. (e.g. sg1,sg2,sg3)
    Type: CommaDelimitedList
    Default: ''
  SubnetIds:
    Description: (Optional) One or more Subnet IDs corresponding to the Subnet that
      the Lambda function can use to access you data source. (e.g. subnet1,subnet2)
    Type: CommaDelimitedList
    Default: ''
  PermissionsBoundaryARN:
    Description: (Optional) An IAM policy ARN to use as the PermissionsBoundary for
      the created Lambda function's execution role
    Default: ''
    Type: String
Conditions:
  HasPermissionsBoundary:
    Fn::Not:
    - Fn::Equals:
      - Ref: PermissionsBoundaryARN
      - ''
  HasSecurityGroups:
    Fn::Not:
    - Fn::Equals:
      - Fn::Join:
        - ''
        - Ref: SecurityGroupIds
      - ''
  HasSubnets:
    Fn::Not:
    - Fn::Equals:
      - Fn::Join:
        - ''
        - Ref: SubnetIds
      - ''
Resources:
  JdbcConnectorConfig:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          disable_spill_encryption:
            Ref: DisableSpillEncryption
          spill_bucket:
            Ref: SpillBucket
          spill_prefix:
            Ref: SpillPrefix
          default:
            Ref: DefaultConnectionString
      FunctionName:
        Ref: LambdaFunctionName
      Handler: com.amazonaws.athena.connectors.snowflake.SnowflakeMuxCompositeHandler
      CodeUri:
        Bucket: awsserverlessrepo-changesets-1f9ifp952i9h0
        Key: 578517639677/arn:aws:serverlessrepo:us-east-1:292517598671:applications-AthenaSnowflakeConnector-versions-2024.33.1/fc96439b-4e19-420a-b3a0-36c8f1e891c4
      Description: Enables Amazon Athena to communicate with Snowflake using JDBC
      Runtime: java11
      Timeout:
        Ref: LambdaTimeout
      MemorySize:
        Ref: LambdaMemory
      PermissionsBoundary:
        Fn::If:
        - HasPermissionsBoundary
        - Ref: PermissionsBoundaryARN
        - Ref: AWS::NoValue
      Policies:
      - Statement:
        - Action:
          - secretsmanager:GetSecretValue
          Effect: Allow
          Resource:
            Fn::Sub: arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretNamePrefix}*
        Version: '2012-10-17'
      - Statement:
        - Action:
          - logs:CreateLogGroup
          Effect: Allow
          Resource:
            Fn::Sub: arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*
        Version: '2012-10-17'
      - Statement:
        - Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Effect: Allow
          Resource:
            Fn::Sub: arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionName}:*
        Version: '2012-10-17'
      - Statement:
        - Action:
          - athena:GetQueryExecution
          Effect: Allow
          Resource: '*'
        Version: '2012-10-17'
      - S3CrudPolicy:
          BucketName:
            Ref: SpillBucket
      - VPCAccessPolicy: {}
      VpcConfig:
        SecurityGroupIds:
          Fn::If:
          - HasSecurityGroups
          - Ref: SecurityGroupIds
          - Ref: AWS::NoValue
        SubnetIds:
          Fn::If:
          - HasSubnets
          - Ref: SubnetIds
          - Ref: AWS::NoValue
